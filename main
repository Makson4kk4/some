#include <stdio.h> 
#include <stdlib.h> 
#include <pthread.h> 
#include <unistd.h> 
#define MAX 3 
int N; 
void read_values(int matrixA[N][N],int matrixB[N][N], int *value, char *filename1, char *filename2) 
{ 
  FILE * first = fopen(filename1,"r"); 
  FILE * second = fopen(filename2,"r"); 
  int k=0,a,count=0,countt=0; 
  while ((fscanf(first, "%d" ,&a) != EOF) ) 
      { 
        value[k] = a; 
        k+=1; 
        countt+=1; 
        if (countt==N){ 
          countt=0; 
          count+=1; 
        } 
      } 
  if (count!=N) { 
    printf("Error, matrix is not square\n"); 
    exit(1); 
  } 
  for (int i = 0 , k=0; i<N ; i++){ 
    for (int j = 0; j<N ; j++){ 
      matrixA[i][j] = value[k++]; 
    } 
  } 
  k=0; 
  count=0;countt=0; 
  while ((fscanf(second, "%d" ,&a) != EOF)) 
      { 
        value[k] = a; 
        k+=1; 
        countt+=1; 
      if (countt==N){ 
          countt=0; 
          count+=1; 
        } 
      } 
  if (count!=N) { 
    printf("Error, matrix is not square\n"); 
    exit(1); 
  } 
  for (int i = 0 , k = 0;  i<N ; i++) { 
    for (int j = 0; j<N;j++){ 
      matrixB[i][j] = value[k++]; 
    } 
  } 
  fclose(first); 
  fclose(second); 
} 
void *mult(void* arg){ 
  int *data = (int *)arg; 
  int k = 0, i = 0; 
  int x = data[0]; 
  for (i = 1; i <= x; i++) 
      k += data[i]*data[i+x]; 
  int *p = (int*)malloc(sizeof(int)); 
  *p = k; 
   pthread_exit(p); 
} 
void thr(int matrixA[N][N], int matrixB[N][N],int matrixtest[N][N], int *result){ 
    int max = N*N; 
    pthread_t *threads; 
    threads = (pthread_t*)malloc(max*sizeof(pthread_t)); 
    int i,j,k; 
    int count = 0; 
    int* data = NULL; 
    for (i = 0; i < N; i++) 
        for (j = 0; j < N; j++) 
        { 
            data = (int *)malloc((9)*sizeof(int)); 
            data[0] = N; 
            for (k = 0; k < N; k++) 
                data[k+1] = matrixA[i][k]; 
            for (k = 0; k < N; k++) 
                data[k+N+1] = matrixB[k][j]; 
                pthread_create(&threads[count++], NULL, mult, (void*)(data)); 
        } 
 
    for (i=0;i<max;i++) 
    { 
        int m=0; 
        j=0; 
        void *k; 
        pthread_join(threads[i], &k); 
        int *p = (int *)k; 
        result[i]=*p; 
    } 
    for (i = 0, max=0;i<N;i++){ 
       for (j=0;j<N;j++){ 
         matrixtest[i][j]=result[max]; 
         max++; 
    } 
    } 
} 
void reverse( int matrixtest[N][N]){ 
  for (int i = 0; i<N; i++){ 
    for (int j = 0;j<N;j++){ 
      if((i!=j) &&  (matrixtest[i][j]!=0)){ 
        printf("NO"); 
        exit(1); 
      } 
      if ((i==j) && (matrixtest[i][j]==1)) continue; 
    } 
  } 
  printf("YES"); 
} 
int main(int argc, char *argv[]){ 
  struct fuck{ 
    int data; 
  }; 
  char * filename1 = argv[1]; 
  char * filename2 = argv[2]; 
  printf("%s %s", filename1, filename2); 
  printf("The size of the matrix = "); 
  scanf("%d", &N); 
  int matrixA[N][N]; 
  int matrixtest[N][N],matrixtest2[N][N]; 
  int val; 
  val = N*N; 
  int result[val]; 
  int value[val]; 
  int data; 
  int matrixB[N][N]; 
  read_values(matrixA,matrixB,value,filename1,filename2); 
  FILE * aboba = fopen("rrtest.txt","w"); 
  for (int i=0; i<N;i++){ 
    for (int j=0; j<N;j++){ 
      data = matrixA[i][j]; 
      fprintf(aboba,"%d ",data); 
    } 
    fprintf(aboba,"\n"); 
  } 
  fprintf(aboba,"\n-------------\n"); 
  for (int i=0; i<N;i++){ 
    for (int j=0; j<N;j++){ 
      data = matrixB[i][j]; 
      fprintf(aboba,"%d ",data); 
    } 
    fprintf(aboba,"\n"); 
  } 
  fprintf(aboba,"\n-------------\n"); 
  thr(matrixA,matrixB,matrixtest,result); 
  for (int i=0; i<N;i++){ 
    for (int j=0; j<N;j++){ 
      data = matrixtest[i][j]; 
      fprintf(aboba,"%d ",data); 
    } 
    fprintf(aboba,"\n"); 
  } 
  fprintf(aboba,"\n-------------\n"); 
  reverse(matrixtest); 
  pclose(aboba); 
}
